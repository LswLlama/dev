#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>


#define MAX_INPUT 50						// maximum length of input string. You can ignore this one.
#define NUM_PEOPLE 10						// number of participants
#define TOTAL_STOCKS 10					// total number of available stocks
#define SLOTS_PER_PERSON 5			// amount of stock slots per participant
#define STARTING_BUDGET 500			// participant's starting budget
#define MAX_STOCK_VALUE 100			// maximum stock value for initialization

//Meaningful indices into each participant record
enum indices {ID=0, BUDGET=1, NUM_STOCKS=2, STOCK_START=3};

//Global Variables
int *participants[NUM_PEOPLE];	// Global array saving pointers to participant records
int stocks[TOTAL_STOCKS];				// Global array saving values of each stock

//Forward Declarations for convenience
void printRanking();
void printStockValues();
void init(int seed);
int buyStock(int id, int stockId, int amount);
int sellStock(int id, int stockId, int amount);
int changeStockValue(int stockId, int amount);
int getAssets(int *participant);

/*

*/
int getBudget();
int getStockValue(int stockId);
int findParticipant(int id);
void updateRanking();
int ownsStockAt();

// [GIVEN FUNCTIONS] - These functions are predefined
// If these do not work properly, you have to adjust your implementation.
void printRanking(){
	int currRank = 1;
	int currScore = getAssets(participants[0]); 
	
	for(int i = 1; i <= NUM_PEOPLE; i++){
		if(currScore != getAssets(participants[i-1])){ //정렬은 이미 돼있음
			currRank = i;
			currScore = getAssets(participants[i-1]);
		}
			
			printf("%2d.\tParticipant %d\t%4d\t%4d\n", currRank, participants[i-1][ID], participants[i-1][BUDGET], currScore);

	}
}

void printStockValues(){
	for(int i = 0; i < TOTAL_STOCKS; i++)
		printf("Stock #%2d\t%3d\n", i, stocks[i]);
}

// [MANDATORY FUNCTIONS] - You need to implement these

void init(int seed){
    srand(seed);
    // 참여자 배열 선언 10 로우 13개 칼럼 갱신 어셋 순서로 
    // 스탁1차원 값을 랜덤으로 배열 
    for(int i=0; i<NUM_PEOPLE; i++){
        participants[i] = (int *) calloc(13, sizeof(int));
        participants[i][ID] = i;
        participants[i][BUDGET] = 500;
        participants[i][NUM_STOCKS] = 0;
    }
    for(int i=0; i<TOTAL_STOCKS; i++){
        stocks[i]=rand()%100+1;
    }
    

}

int buyStock(int id, int stockId, int amount){ // 0: 돈, -1: 갯수
    printf("Participant %d is trying to buy %d unit(s) of stock #%d\n", id, amount, stockId);
    int* participant = participants[findParticipant(id)]; // row
    participant[BUDGET] -= getStockValue(stockId)*amount;//주당 가격 * 양
    if(participant[BUDGET]<0){
        participant[BUDGET] += getStockValue(stockId)*amount;
        return 0;
    }
    for (int i=0; i<participant[NUM_STOCKS]; i++){
        if (participant[STOCK_START+(i*2)] == stockId){ //있을떄
            // 주식을 추가 주만
            participant[STOCK_START+(i*2)+1] += amount; // 주식 추가

            updateRanking();
            
	        return 1;
        }
    }
    //없을때 추가 또는 -1 리턴
    if(participant[NUM_STOCKS] < 5){
        participant[NUM_STOCKS] += 1; //갖고있는 수 추가;
        participant[STOCK_START+(NUM_STOCKS*2)] = stockId; //아이디 할당
        participant[STOCK_START+(NUM_STOCKS*2)+1] += amount; // 주식 추가 
        

        //
        updateRanking();
        
	    return 1;
    }
    else{
        return -1;
    }

	
}
 
//0 낫 이너프 -1 낫 헤브
int sellStock(int id, int stockId, int amount){//이쓴지
    printf("Participant %d is trying to sell %d unit(s) of stock #%d\n", id, amount, stockId);
    int* participant = participants[findParticipant(id)]; // row
    
    for (int i=0; i<participant[NUM_STOCKS]; i++){ //넘스탁 유무
        if (participant[STOCK_START+(i*2)] == stockId){ //있을떄
            // 충분?
            if (participant[STOCK_START+(i*2)+1] - amount >=0){
                //작동
                participant[STOCK_START+(i*2)+1] -= amount;
                if(participant[STOCK_START+(i*2)+1] == 0){ //주식 갯수가 0
                    participant[STOCK_START+(i*2)] = 0; // 주식 0
                    participant[NUM_STOCKS]-=1;
//pop
                    for (int j=STOCK_START+(i*2); j < (STOCK_START+participant[NUM_STOCKS]*2); j+=2){
                        participant[STOCK_START+(i*2)] = participant[STOCK_START+(i*2)+2];
                        participant[STOCK_START+(i*2)+1] = participant[STOCK_START+(i*2)+1+2];
                        participant[STOCK_START+(i*2)+2] = 0;
                        participant[STOCK_START+(i*2)+1+2] = 0;
                    }

                }
                updateRanking();
                
                return 1;
            }
            else{
                return 0;
            }
        }
    }
    return -1;


}

int changeStockValue(int stockId, int amount){
	if(stocks[stockId] + amount > 0){
//
        stocks[stockId] += amount;
        updateRanking();
        printf("Stock #%d's value is %s by %d\n", stockId, (amount < 0)?"decreased":"increased", abs(amount));

        
        return 1;
    }

    else{
        return 0;
    }
	
}

int getAssets(int *participant){
	int asset=0;
    asset += participant[1]; // budgets
    for(int i=0; i<participant[NUM_STOCKS]; i++){ //넘스탁 유무
        asset += participant[STOCK_START+(i*2)+1]*getStockValue(participant[STOCK_START+(i*2)]);
    }
    return asset;
}

// [RECOMMENDED FUNCTIONS] - You may or may not implement and use these
// These functions are hints to show you what functions might be helpful
// You can implement the homework without them
// But using functions to break your code into easily understandable parts is good practice
// So, give it a try :)

int getBudget(){}

int getStockValue(int stockId){ // 1차원 어래이 순서가 stockId
    return stocks[stockId];
}

// Since the participants need to be ordered by the vlaue of their assets
// doing the sorting in a function might be helpful
void updateRanking(){

    int score, curscore;
    int *temp;
    for(int i=0; i<NUM_PEOPLE; i++){
        score = getAssets(participants[i]);
        for(int j=i+1; j<NUM_PEOPLE; j++){
            curscore = getAssets(participants[j]);
            if(score < curscore){
                temp = participants[i];
                participants[i] = participants[j];
                participants[j] = temp;
            }
        }
    }
}

//You will have to find a specific participant in the array quite often
//So abstracting it into a function might help
int findParticipant(int id){//participants 는 어셋 순서로 배열됨, 로우 값을 i로 찾아야됨
    for(int i=0; i<NUM_PEOPLE; i++){
        if(participants[i][ID]==id){
            return i;
        }
    }
}
    
//Returning the position of a specific stock might be helpful
int ownsStockAt(){}

//add as many more functions as necessary



//The main is fully commented in case you are curious about how it works
//Parts important for your implementation are marked

int main(){

	int seed;

	scanf("%d", &seed);
	getchar(); //Using getchar() here to consume the leftover newline character from scanf

	init(seed);


	char input[MAX_INPUT];  //place to store the input string
	char *arg[5];           //array to store single arguments
	int running = 1;        //flag to determine whether to end the program or not
	int argNum;             //number of arguments passed in the input string
	int ret;                //variable to save function return values

	//Entering user input loop. What might be the benefit of using a do...while-loop?
	do{ 
		
		fgets(input, MAX_INPUT-1, stdin); // reading MAX_INPUT-1 number of characters from stdin
																			// to leave space for the null character!


		// strtok() is a little difficult. This part simply reads the string input and cuts
		// it into the individual arguments, which are stored in the arg array
		// If you are curious about strtok(), check this link: https://man7.org/linux/man-pages/man3/strtok.3.html
		arg[0] = strtok(input, " ");
		for(argNum = 1; argNum < 5; argNum++)
			if(!(arg[argNum] = strtok(NULL, " "))) break;

		//switching based on the first letter of the first argument string
		switch(arg[0][0]){
			
			case 'q':	
				running = 0; break;
			
			case 'p':	
				printf("\n");
				printStockValues();
				printf("\n");
				printRanking(); 
				break;
			
			
				case 'b':
				if(argNum < 4) { printf("Not enough arguments for this command!\n"); break;}
				//[IMPORTANT] Decide buyStock()'s return value based on the below if statement and the error message
				//atoi() is a function that converts a string to an integer. 
				//It is defined here if you are interested: https://man7.org/linux/man-pages/man3/atoi.3.html
				ret = buyStock(atoi(arg[1]), atoi(arg[2]), atoi(arg[3]));
				if(!ret)
					printf("[ERROR] Not enough money to buy this stock!\n");
				else if(ret < 0)
					printf("[ERROR] The buyer already owns the maximum amount of different stocks!\n");
				
				break; 
			
			
			case 's':
				if(argNum < 4) { printf("Not enough arguments for this command!\n"); break;}
				//[IMPORTANT] Decide sellStock()'s return value based on the below if statement and the error message
				ret = sellStock(atoi(arg[1]), atoi(arg[2]), atoi(arg[3]));
				if(!ret)
					printf("[ERROR] The seller does not own enough stocks!\n"); 
				else if(ret < 0)
					printf("[ERROR] The seller does not own this stock!\n");
				break;
			
			
			case 'v':
				if(argNum < 3) { printf("Not enough arguments for this command!\n"); break;}
				//[IMPORTANT] Decide changeStockValue()'s return value based on the below if statement and the error message
				if(!changeStockValue(atoi(arg[1]), atoi(arg[2])))
					printf("[ERROR] Stock values cannot fall to 0!\n"); 
				 break;
			
			default:
				printf("Invalid Command\n"); //Ignore invalid commands
		};
	}while(running);



	printf("Final Ranking:\n");
	printRanking();
}